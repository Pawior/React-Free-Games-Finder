{"version":3,"sources":["components/GameList/constants.ts","components/hooks/useFetch/index.ts","styles/theme/index.ts","styles/breakpoints/index.ts","components/GameCard/styles.tsx","components/GameCard/index.tsx","components/GameCard/constants.ts","components/GameFilter/constants.ts","components/GameFilter/styles.tsx","components/GameFilter/index.tsx","components/GameList/styles.tsx","components/GameList/GameList.render.tsx","components/GameList/index.ts","components/GameList/GameList.container.tsx","components/Home/index.tsx","components/hoc/withErrorBoundary/index.tsx","components/GlobalStyles/index.ts","styles/fonts/index.ts","components/App/index.tsx","reportWebVitals.ts","index.tsx"],"names":["API_HOST","useFetch","params","useState","games","setGames","err","setError","platform","genre","tag","sortBy","useEffect","axios","get","baseURL","headers","category","then","res","data","catch","e","message","error","secondaryTextColor","backgroundColor","breakpoints","StyledLink","styled","Link","StyledImg","img","StyledTitle","h2","Details","div","Description","p","Genre","IconStyle","css","StyledCgBrowser","CgBrowser","StyledCgWindows","CgWindows","GameCard","content","id","title","thumbnail","short_description","console","log","icons","split","map","icon","trim","link","to","alt","src","PLATFORMS","value","display","GENRES","SORT_BY","Form","form","Label","label","StyledSelect","select","GameFilter","onChange","htmlFor","name","List","ul","ListItem","li","GameList","onFilterChange","length","game","filter","setFilter","useCallback","current","target","preventDefault","withErrorBoundary","WrappedComponent","props","state","hasError","this","Component","GlobalStyles","createGlobalStyle","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d2d28f60.chunk.js","sourcesContent":["export const API_KEY = \"020b594420msh8e8592eaadbe93bp16b08ejsn8e464130d01e\";\r\nexport const API_HOST = \"free-to-play-games-database.p.rapidapi.com\";\r\n","import { Game } from \"src/types\";\r\nimport { Filter } from \"src/components/GameList/types\";\r\nimport axios from \"axios\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { API_HOST, API_KEY } from \"src/components/GameList/constants\";\r\n\r\ntype Response = {\r\n  games: Game[];\r\n  error?: string;\r\n};\r\n\r\nconst useFetch = (params: Filter): Response => {\r\n  const [games, setGames] = useState<Game[]>([]);\r\n  const [err, setError] = useState<string>(\"\");\r\n  const { platform, genre, tag, sortBy } = params;\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"/games\", {\r\n        baseURL: `https://${API_HOST}/api`,\r\n        headers: {\r\n          \"x-rapidapi-key\": API_KEY,\r\n          \"x-rapidapi-host\": API_HOST,\r\n        },\r\n        params: {\r\n          platform,\r\n          category: genre,\r\n          tag,\r\n          \"sort-by\": sortBy,\r\n        },\r\n      })\r\n      .then((res) => setGames(res.data))\r\n      .catch((e) => setError(e.message));\r\n  }, [platform, genre, tag, sortBy]);\r\n  return {\r\n    games,\r\n    error: err,\r\n  };\r\n};\r\nexport default useFetch;\r\n","export const primaryColor = \"#272b30\";\r\nexport const secondaryColor = \"#32383e\";\r\n\r\nexport const primaryTextColor = \"#aaa\";\r\nexport const secondaryTextColor = \"#7a8288\";\r\nexport const tertiaryTextColor = \"#272b30\";\r\n\r\nexport const backgroundColor = \"#7a8288\";\r\n","export const breakpoints = {\r\n  tablet: \"720px\",\r\n  desktop: \"1024px\",\r\n};\r\n","import styled, { css } from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  secondaryColor,\r\n  primaryTextColor,\r\n  secondaryTextColor,\r\n  tertiaryTextColor,\r\n  backgroundColor,\r\n} from \"src/styles/theme\";\r\nimport { breakpoints } from \"src/styles/breakpoints\";\r\nimport { CgBrowser, CgWindows } from \"react-icons/cg\";\r\n\r\nexport const StyledLink = styled(Link)`\r\n  display: inline-block;\r\n  width: 100%;\r\n  background-color: ${secondaryColor};\r\n  border-radius: 4px;\r\n  text-decoration: none;\r\n`;\r\nexport const StyledImg = styled.img`\r\n  width: 100%;\r\n  padding-left: -0px !important;\r\n`;\r\nexport const StyledTitle = styled.h2`\r\n  margin: 0;\r\n  font-size: 24px;\r\n  font-weight: 510;\r\n  padding-left: 3px;\r\n  color: ${primaryTextColor};\r\n  @media (min-width: ${breakpoints.tablet}) {\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n  }\r\n`;\r\n\r\nexport const Details = styled.div`\r\n  padding: 20px;\r\n  padding-left: 3px;\r\n  position: relative;\r\n  @media (min-width: ${breakpoints.tablet}) {\r\n    white-space: nowrap;\r\n  }\r\n`;\r\n\r\nexport const Description = styled.p`\r\n  font-size: 16px;\r\n  padding-left: 3px;\r\n  color: ${secondaryTextColor};\r\n  @media (min-width: ${breakpoints.tablet}) {\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n  }\r\n`;\r\n\r\nexport const Genre = styled.p`\r\n  position: absolute;\r\n  right: 0;\r\n  bottom: 0;\r\n  padding: 2px 4px;\r\n  margin: 0 8px 0 0;\r\n  border-radius: 4px;\r\n  font-size: 12px;\r\n  font-weight: bold;\r\n  color: ${tertiaryTextColor};\r\n  background-color: ${backgroundColor};\r\n`;\r\nconst IconStyle = css`\r\n  font-size: 2rem;\r\n  color: black;\r\n  margin-right: 8px;\r\n`;\r\nexport const StyledCgBrowser = styled(CgBrowser)`\r\n  ${IconStyle}\r\n`;\r\nexport const StyledCgWindows = styled(CgWindows)`\r\n  ${IconStyle}\r\n`;\r\n","import React, { ReactElement } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Game } from \"../../types\";\r\nimport { WINDOWS, BROWSER } from \"./constants\";\r\nimport { SiWindows } from \"react-icons/si\";\r\nimport { GoBrowser } from \"react-icons/go\";\r\nimport { CgBrowser, CgWindows } from \"react-icons/cg\";\r\nimport {\r\n  StyledLink,\r\n  StyledImg,\r\n  StyledTitle,\r\n  Description,\r\n  Genre,\r\n  StyledCgBrowser,\r\n  StyledCgWindows,\r\n  Details,\r\n} from \"./styles\";\r\n\r\ninterface Props {\r\n  content: Game;\r\n}\r\n\r\nconst GameCard = ({ content }: Props): ReactElement => {\r\n  const { id, title, thumbnail, short_description, genre, platform } = content;\r\n  console.log(platform);\r\n  const icons = platform.split(\",\").map((p) => {\r\n    let icon = null;\r\n    switch (p.trim()) {\r\n      case BROWSER:\r\n        icon = <StyledCgBrowser />;\r\n        break;\r\n      case WINDOWS:\r\n        icon = <StyledCgWindows />;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    return icon;\r\n  });\r\n  const link = `/game/${id}`;\r\n\r\n  return (\r\n    <StyledLink to={link}>\r\n      <StyledImg alt={` ${title} thumbnail`} src={thumbnail}></StyledImg>\r\n      <Details>\r\n        <StyledTitle> {title} </StyledTitle>\r\n        <Description> {short_description}</Description>\r\n        <Genre> {genre}</Genre>\r\n        {icons}\r\n      </Details>\r\n    </StyledLink>\r\n  );\r\n};\r\n\r\nexport default GameCard;\r\n","export const BROWSER = \"Web Browser\";\r\nexport const WINDOWS = \"PC (Windows)\";\r\n","export const PLATFORMS = [\r\n  {\r\n    value: \"browser\",\r\n    display: \"Browser (Web)\",\r\n  },\r\n  {\r\n    value: \"pc\",\r\n    display: \"Windows (PC)\",\r\n  },\r\n];\r\n\r\nexport const GENRES = [\r\n  {\r\n    value: \"mmorpg\",\r\n    display: \"MMORPG\",\r\n  },\r\n  {\r\n    value: \"shooter\",\r\n    display: \"Shooter\",\r\n  },\r\n  {\r\n    value: \"strategy\",\r\n    display: \"Strategy\",\r\n  },\r\n  {\r\n    value: \"moba\",\r\n    display: \"Moba\",\r\n  },\r\n  {\r\n    value: \"card\",\r\n    display: \"Card Games\",\r\n  },\r\n  {\r\n    value: \"racing\",\r\n    display: \"Racing\",\r\n  },\r\n  {\r\n    value: \"sports\",\r\n    display: \"Sports\",\r\n  },\r\n  {\r\n    value: \"social\",\r\n    display: \"Social\",\r\n  },\r\n  {\r\n    value: \"fighting\",\r\n    display: \"Fighting\",\r\n  },\r\n];\r\n\r\nexport const TAGS = [\r\n  {\r\n    value: \"mmofps\",\r\n    display: \"MMOFPS\",\r\n  },\r\n  {\r\n    value: \"action-rpg\",\r\n    display: \"Action RPG\",\r\n  },\r\n  {\r\n    value: \"sandbox\",\r\n    display: \"Sandbox\",\r\n  },\r\n  {\r\n    value: \"open-world\",\r\n    display: \"Open World\",\r\n  },\r\n  {\r\n    value: \"survival\",\r\n    display: \"Survival\",\r\n  },\r\n  {\r\n    value: \"battle-royale\",\r\n    display: \"Battle Royale\",\r\n  },\r\n  {\r\n    value: \"mmotps\",\r\n    display: \"MMOTPS\",\r\n  },\r\n  {\r\n    value: \"anime\",\r\n    display: \"Anime\",\r\n  },\r\n  {\r\n    value: \"pvp\",\r\n    display: \"PvP\",\r\n  },\r\n  {\r\n    value: \"pve\",\r\n    display: \"PvE\",\r\n  },\r\n  {\r\n    value: \"fantasy\",\r\n    display: \"Fantasy\",\r\n  },\r\n  {\r\n    value: \"sci-fi\",\r\n    display: \"Sci-Fi\",\r\n  },\r\n];\r\n\r\nexport const SORT_BY = [\r\n  {\r\n    value: \"relevance\",\r\n    display: \"Relevance\",\r\n  },\r\n  {\r\n    value: \"popularity\",\r\n    display: \"Popularity\",\r\n  },\r\n  {\r\n    value: \"release-date\",\r\n    display: \"Release Date\",\r\n  },\r\n  {\r\n    value: \"alphabetical\",\r\n    display: \"Alphabetical\",\r\n  },\r\n];\r\n","import styled from \"styled-components\";\r\nimport { backgroundColor, secondaryTextColor } from \"src/styles/theme\";\r\nimport { breakpoints } from \"src/styles/breakpoints\";\r\n\r\nexport const Form = styled.form`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  max-width: 542px;\r\n  padding: 0 16px;\r\n  margin: 24px auto;\r\n  color: ${secondaryTextColor};\r\n  box-sizing: border-box;\r\n  @media (min-width: ${breakpoints.tablet}) {\r\n    max-width: ${breakpoints.tablet};\r\n  }\r\n  @media (min-width: ${breakpoints.desktop}) {\r\n    max-width: 1010px;\r\n  }\r\n`;\r\n\r\nexport const Label = styled.label`\r\n  display: inline-block;\r\n  margin-right: 16px;\r\n  flex-basis: 25%;\r\n  &:last-of-type {\r\n    margin-right: 0;\r\n  }\r\n`;\r\n\r\nexport const StyledSelect = styled.select`\r\n  width: 100%;\r\n  margin-top: 8px;\r\n  color: #32383e;\r\n  background-color: ${backgroundColor};\r\n  border: 0;\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n  &:hover {\r\n    color: black;\r\n  }\r\n`;\r\n","import React, { ReactElement, ChangeEvent } from \"react\";\r\nimport { PLATFORMS, GENRES, TAGS, SORT_BY } from \"./constants\";\r\nimport { Label, StyledSelect, Form } from \"./styles\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\n\r\ninterface Props {\r\n  onChange?: (e: ChangeEvent<HTMLFormElement>) => void;\r\n}\r\n\r\nconst GameFilter = ({ onChange }: Props): ReactElement => {\r\n  return (\r\n    <Form onChange={onChange}>\r\n      <Label htmlFor=\"platform-select\">\r\n        Platform:\r\n        <StyledSelect name=\"platform\" id=\"platform-select\">\r\n          {PLATFORMS.map((platform) => (\r\n            <option key={platform.value} value={platform.value}>\r\n              {platform.display}\r\n            </option>\r\n          ))}\r\n        </StyledSelect>\r\n      </Label>\r\n      <Label htmlFor=\"genre-select\">\r\n        Genre:\r\n        <StyledSelect name=\"genre\" id=\"genre-select\">\r\n          <option value=\"\">All Genres</option>\r\n          {GENRES.map((genre) => (\r\n            <option key={genre.value} value={genre.value}>\r\n              {genre.display}\r\n            </option>\r\n          ))}\r\n        </StyledSelect>\r\n      </Label>\r\n      <Label htmlFor=\"sortBy-select\">\r\n        Sort By:\r\n        <StyledSelect name=\"sortBy\" id=\"sortBy-select\">\r\n          {SORT_BY.map((sortBy) => (\r\n            <option key={sortBy.value} value={sortBy.value}>\r\n              {sortBy.display}\r\n            </option>\r\n          ))}\r\n        </StyledSelect>\r\n      </Label>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default GameFilter;\r\n","import { breakpoints } from \"src/styles/breakpoints\";\r\nimport styled from \"styled-components\";\r\n\r\n// export const List = styled.ul`\r\n//   box-sizing: border-box;\r\n//   display: block;\r\n//   max-width: 542px;\r\n//   margin: 0 auto;\r\n//   padding: 0 16px;\r\n//   list-style-type: none;\r\n\r\n//   @media (min-width: ${breakpoints.tablet}) {\r\n//     max-width: ${breakpoints.tablet};\r\n//   }\r\n//   @media (min-width: ${breakpoints.desktop}) {\r\n//     max-width: ${breakpoints.desktop};\r\n//   }\r\n// `;\r\n\r\n// export const ListItem = styled.li`\r\n//   margin-bottom: 24px;\r\n//   transition: all 0.2s ease-in-out;\r\n\r\n//   &:hover {\r\n//     transform: scale(1.03);\r\n//   }\r\n//   @media (min-width: ${breakpoints.tablet}) {\r\n//     display: inline-block;\r\n//     max-width: 332px;\r\n//     margin-right: 24px;\r\n//     &:nth-of-type(even) {\r\n//       margin-right: 0;\r\n//     }\r\n//   }\r\n//   @media (min-width: ${breakpoints.desktop}) {\r\n//     display: inline-block;\r\n//     max-width: 312px;\r\n\r\n//     &:nth-of-type(even) {\r\n//       margin-right: 24px;\r\n//     }\r\n//     &:nth-of-type(3n + 3) {\r\n//       margin-right: 0;\r\n//     }\r\n//   }\r\n// `;\r\nexport const List = styled.ul`\r\n  box-sizing: border-box;\r\n  display: grid;\r\n  max-width: 90%;\r\n  margin: 0 auto;\r\n  padding: 0 16px;\r\n  list-style-type: none;\r\n  grid-template-columns: repeat(auto-fill, minmax(255px, 1fr));\r\n  grid-gap: 3rem;\r\n  justify-content: center;\r\n`;\r\n\r\nexport const ListItem = styled.li`\r\n  transition: all 0.2s ease-in-out;\r\n  grid-column: auto;\r\n  &:hover {\r\n    transform: scale(1.03);\r\n  }\r\n`;\r\n","import React, { ReactElement, ChangeEvent } from \"react\";\r\nimport GameCard from \"../GameCard\";\r\nimport GameFilter from \"../GameFilter\";\r\nimport { Game } from \"../../types\";\r\nimport { List, ListItem } from \"./styles\";\r\n\r\ninterface Props {\r\n  err?: string;\r\n  games: Game[];\r\n  onFilterChange: (e: ChangeEvent<HTMLFormElement>) => void;\r\n}\r\n\r\nconst GameList = ({ err, games, onFilterChange }: Props): ReactElement => {\r\n  if (err) {\r\n    return <p> Unable to fetch games</p>;\r\n  }\r\n  if (!games?.length) {\r\n    return <p> No games available</p>;\r\n  }\r\n  return (\r\n    <>\r\n      <GameFilter onChange={onFilterChange} />\r\n      <List>\r\n        {games.map((game) => (\r\n          <ListItem key={game.id}>\r\n            <GameCard content={game} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GameList;\r\n","import GameList from \"./GameList.container\";\r\n\r\nexport default GameList;\r\n","import React, {\r\n  ReactElement,\r\n  useState,\r\n  useEffect,\r\n  useCallback,\r\n  ChangeEvent,\r\n} from \"react\";\r\nimport useFetch from \"src/components/hooks/useFetch\";\r\nimport GameListRender from \"./GameList.render\";\r\nimport axios from \"axios\";\r\nimport { Game } from \"../../types\";\r\nimport { API_HOST, API_KEY } from \"./constants\";\r\nimport { Filter } from \"./types\";\r\n\r\nconst GameList = (): ReactElement => {\r\n  const [filter, setFilter] = useState<Filter>({\r\n    platform: \"browser\",\r\n    sortBy: \"relevance\",\r\n  });\r\n  const { games, error } = useFetch(filter);\r\n\r\n  const onFilterChange = useCallback((e: ChangeEvent<HTMLFormElement>) => {\r\n    setFilter((current) => ({\r\n      ...current,\r\n      [e.target.name]: e.target.value,\r\n    }));\r\n    e.preventDefault();\r\n  }, []);\r\n  return (\r\n    <GameListRender err={error} games={games} onFilterChange={onFilterChange} />\r\n  );\r\n};\r\n\r\nexport default GameList;\r\n","import React, { ReactElement } from \"react\";\r\nimport GameList from \"../GameList\";\r\nimport withErrorBoundary from \"../hoc/withErrorBoundary\";\r\nconst Home = (): ReactElement => (\r\n  <main>\r\n    <GameList />;\r\n  </main>\r\n);\r\nexport default withErrorBoundary(Home);\r\n","import React, { Component, ComponentClass, ComponentType } from \"react\";\r\n\r\ninterface State {\r\n  hasError: boolean;\r\n}\r\n\r\nconst withErrorBoundary = <T extends Record<string, never>>(\r\n  WrappedComponent: ComponentType<T>\r\n): ComponentClass<T, State> =>\r\n  class ErrorBoundary extends Component<T, State> {\r\n    constructor(props: T) {\r\n      super(props);\r\n      this.state = { hasError: false };\r\n    }\r\n\r\n    static getDerivedStateFromError(error: Error) {\r\n      console.error(error);\r\n      return { hasError: true };\r\n    }\r\n\r\n    render() {\r\n      if (this.state.hasError) {\r\n        return <p>Something went wrong.</p>;\r\n      }\r\n\r\n      return <WrappedComponent {...this.props} />;\r\n    }\r\n  };\r\n\r\nexport default withErrorBoundary;\r\n","import { fontFamily } from \"src/styles/fonts\";\r\nimport { primaryColor } from \"src/styles/theme\";\r\nimport { createGlobalStyle } from \"styled-components\";\r\n\r\nconst GlobalStyles = createGlobalStyle`\r\n    html {\r\n        height: 100%;\r\n    }\r\n    body {\r\n        height: 100%;\r\n        font-family: ${fontFamily};\r\n        margin: 0;\r\n        box-sizing: border-box;\r\n        background-color: ${primaryColor};\r\n    }\r\n`;\r\n\r\nexport default GlobalStyles;\r\n","export const fontFamily = \"Arial, Verdana, sans-serif\";\r\n","import React, { ReactElement } from \"react\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\nimport Home from \"../Home\";\r\nimport GlobalStyles from \"src/components/GlobalStyles\";\r\nconst App = (): ReactElement => (\r\n  <>\r\n    <GlobalStyles />\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route path=\"/\">\r\n          <Home />\r\n        </Route>\r\n      </Switch>\r\n    </BrowserRouter>\r\n  </>\r\n);\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}